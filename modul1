#include<iostream>
using namespace std;


struct node{
    int value;
    node *left;
    node *right;
};

class btree{
public:
    btree();
    
    void insert(int key);
    void inorder_print();
    void swap_nodes();
    
    
private:
    void insert(int key, node *leaf);
    void inorder_print(node *leaf);
    void swap(node **node1, node **node2);
    void swap_nodes(node *root, int level, int k);
    node *root;
    
    
};


btree::btree(){
    root = NULL;
}

void btree::insert(int key, node *leaf){
    
    if(key < leaf->value){
        if(leaf->left != NULL){
            insert(key, leaf->left);
        }else{
            leaf->left = new node;
            leaf->left->value = key;
            leaf->left->left = NULL;
            leaf->left->right = NULL;
        }
    }else if(key >= leaf->value){
        if(leaf->right != NULL){
            insert(key, leaf->right);
        }else{
            leaf->right = new node;
            leaf->right->value = key;
            leaf->right->right = NULL;
            leaf->right->left = NULL;
        }
    }
    
}

void btree::insert(int key){
    if(root != NULL){
        insert(key, root);
    }else{
        root = new node;
        root->value = key;
        root->left = NULL;
        root->right = NULL;
    }
}

void btree::inorder_print(){
    inorder_print(root);
    cout << "\n";
}

void btree::inorder_print(node *leaf){
    if(leaf != NULL){
        inorder_print(leaf->left);
        cout << leaf->value << ",";
        inorder_print(leaf->right);
    }
}

void  btree::swap(node **node1, node **node2) {
    node *tmp = *node1;
    *node1 = *node2;
    *node2 = tmp;
}

void  btree::swap_nodes() {
    swap_nodes(root, 1, 1);
}


void  btree::swap_nodes(node *root, int level, int k) {
    if (!root || (!root->left && !root->right) )
        return ;
    
    if ((level + 1) % k == 0)
        swap(&(root->left), &(root->right));
    
    swap_nodes(root->left, level + 1, k);
    swap_nodes(root->right, level + 1, k);
}

int main(){
//btree tree;
btree *tree = new btree();

tree->insert(1);
tree->insert(2);
tree->insert(3);
tree->insert(4);
tree->insert(5);
tree->insert(6);
tree->insert(7);

tree->inorder_print();
tree->swap_nodes();
tree->inorder_print();

delete tree;

}
